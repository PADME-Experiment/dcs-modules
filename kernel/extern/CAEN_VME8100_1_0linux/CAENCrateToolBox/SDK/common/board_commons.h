////////////////////////////////////////////////////////////////////////////////////////////////
/*! \file    board_commons.h
*   \brief   Board common features definitions
*   \author  NDA
*   \version 1.0
*   \date    07/2008
*            
*            Boards common APIs: typically level 0 APIs
*            These APIs provide features common to every board.
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef __BOARD_COMMONS_H
#define __BOARD_COMMONS_H

////////////////////////////////////////////////////////////////////////////////////////////////
// File includes
////////////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>

#include "common_defs.h"
#include "com_phy_layer.h"

////////////////////////////////////////////////////////////////////////////////////////////////
// Global defines
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_OK
*   \brief   Command answer Ok with no return value
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_OK			"#CMD:OK"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_OK_INT
*   \brief   Command answer Ok with integer return value
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_OK_INT			"#CMD:OK,VAL:%d\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_OK_FLOAT
*   \brief   Command answer Ok with floating point return value
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_OK_FLOAT		"#CMD:OK,VAL:%f\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_OK_STRING
*   \brief   Command answer Ok with string return value
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_OK_STRING		"#CMD:OK,VAL:%s\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_CMD_ERR
*   \brief   Command answer with command error
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_CMD_ERR			"#CMD:ERR\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_CH_ERR
*   \brief   Command answer with channel error
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_CH_ERR			"#CH:ERR\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_PAR_ERR
*   \brief   Command answer with parameter error
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_PAR_ERR			"#PAR:ERR\r"
////////////////////////////////////////////////////////////////////////////////////////////////
/*! \def     CMD_ASW_VAL_ERR
*   \brief   Command answer with value error
*/
////////////////////////////////////////////////////////////////////////////////////////////////
#define CMD_ASW_VAL_ERR			"#VAL:ERR\r"

#define ASW_BUFF_SIZE	256		/* !< The V8100_data::m_p_asw_buff size */

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \enum    _CMD_PARAM_TYPE
*   \brief   The parameter type supported by a command
*            
*/
////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum _CMD_PARAM_TYPE {
	CMD_PTYPE_NONE= 0,		//!< The no parameter
	CMD_PTYPE_INT,			//!< The one integer parameter
	CMD_PTYPE_FLOAT,		//!< The one float parameter
	CMD_PTYPE_STRING,		//!< The one string parameter
} CMD_PARAM_TYPE;

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \enum    _CMD_ERROR_CODE
*   \brief   Command answer error code
*            
*/
////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum _CMD_ERROR_CODE {
	CMD_ERR_OK= 0,			//!< No error , command successful
	CMD_ERR_CMD,			//!< Command Format wrong or command not recognised
	CMD_ERR_CH,				//!< Channel Field not present or channel value wrong
	CMD_ERR_PAR,			//!< Field parameter not present or parameter not recognised
	CMD_ERR_VAL,			//!< Set Value wrong 
	CMD_ERR_BADASW,			//!< Bad Answer format
	CMD_ERR_TOUT,			//!< Answer timeout
	CMD_ERR_TX,				//!< Error on TX
	CMD_ERR_RX,				//!< Error on RX
} CMD_ERROR_CODE;

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \struct  cmd_table
*   \brief   Board commands table entry
*            
*            This is a struct holding boards specific command table entries
*/
////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
	const char* m_cmd_string;		//!< The command string
	int m_min_ch_index;				//!< The minimum channel index
	int m_max_ch_index;				//!< The maximum channel index
	CMD_PARAM_TYPE m_param_type;	//!< The parameter type
	float m_min_value;				//!< The minimum parameter value
	float m_max_value;				//!< The maximum parameter value
	CMD_PARAM_TYPE m_result_type;	//!< The expected answer result type
} cmd_table;

#define LAST_SEND_CMD_SIZE 256	/* !< The board_data::m_p_last_sent_cmd buffer size */

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \struct  board_data
*   \brief   Data common to every board
*            
*            This is the basic structure for every board specific data. 
*            This struct MUST be the first data of any other specific board data.
*/
////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct {
	CPL_OBJ* m_p_cpl_object;					//!< The Communication Physical Layer object
	const cmd_table* m_p_cmd_table;				//!< Pointer to board specific command table
	char* m_p_last_sent_cmd;					//!< The last sent command string
	CMD_ERROR_CODE m_last_cmd_err;				//!< Last communication error code
	char* m_p_asw_buff;
	int m_asw_buff_len;
	char* m_p_tmp_asw_buff;
} board_data;

////////////////////////////////////////////////////////////////////////////////////////////////
// Global variables declaration
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// Global methods declaration
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      UINT8 ror_bits( UINT8 data, int num_bits)
*   \brief   Perfoms a num_bits bitwise right rotation of data byte 
*            
*   \param   data The source byte to rotate
*   \param   num_bits The number of bits to rotate
*   \return  Converted data
*/
////////////////////////////////////////////////////////////////////////////////////////////////
UINT8 ror_bits( UINT8 data, int num_bits);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      UINT8 swap_bits( UINT8 data)
*   \brief   Swaps the bits of the source byte
*            
*   \param   data The source byte to swap
*   \return  Converted data
*/
////////////////////////////////////////////////////////////////////////////////////////////////
UINT8 swap_bits( UINT8 data);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      void delay(int msec)
*   \brief   Waits for specified time
*            
*   \param   msec The time delay to wait (msec)
*/
////////////////////////////////////////////////////////////////////////////////////////////////
void delay(int msec);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      UINT32 get_time
*   \brief   Gets the time in milliseconds since first procedure call
*            
*   \return  The time in milliseconds since first procedure call
*/
////////////////////////////////////////////////////////////////////////////////////////////////
UINT32 get_time( );

////////////////////////////////////////////////////////////////////////////////////////////////
//
//     B O A R D S   H A N D L I N G
//
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      BOOL board_open( board_data* p_data, const CPLConfig *p_com_config, const cmd_table* p_cmd_table);
*   \brief   Basic board open
*            
*            Provides basic handling for board opening, common to all the boards.
*            It tries to open the communication channel, too.
*   \param   p_data Pointer to board data
*   \param   p_com_config The communication physical layer device settings
*   \param   p_cmd_table The board specific command table pointer
*   \return  TRUE: board successfully opened
*   \note    This API if typically called by derived boards during open procedure.
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API BOOL board_open( board_data* p_data, const CPLConfig *p_com_config, const cmd_table* p_cmd_table);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      BOOL board_close( board_data* p_data);
*   \brief   Basic board close
*            
*            Provides basic handling for board closing, common to all the boards.
*            It tries to close the communication channel, too.
*   \param   p_data Pointer to board data
*   \return  TRUE: board successfully closed
*   \note    This API if typically called by derived boards during close procedure.
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API BOOL board_close( board_data* p_data);

////////////////////////////////////////////////////////////////////////////////////////////////
//
//     L E V E L   0   A P I s
//
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      const char* get_last_answer( board_data* p_data);
*   \brief   Get the answer to the last successfull sent command
*            
*   \param   p_data Pointer to board data
*   \return  The answer buffer
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API const char* get_last_answer( board_data* p_data);


////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      CMD_ERROR_CODE get_last_error( board_data* p_data);
*   \brief   Get the last error code
*            
*   \param   p_data Pointer to board data
*   \return  The error code \ref _CMD_ERROR_CODE
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API CMD_ERROR_CODE get_last_error( board_data* p_data);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      BOOL send_buffer( board_data* p_data, const UINT8* buff, UINT16 buff_size);
*   \brief   Sends a data buffer to board
*            
*   \param   p_data Pointer to board data
*   \param   buff The data buffer to send
*   \param   buff_size The data buffer size (BYTEs)
*   \return  TRUE  send procedure ok
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API BOOL send_buffer( board_data* p_data, const UINT8* buff, UINT16 buff_size);

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      BOOL receive_buffer( board_data* p_data, UINT8* buff, UINT16 *buff_size, int timeout_msec);
*   \brief   Read up to *buff_size BYTEs from board
*            
*   \param   p_data Pointer to board data
*   \param   buff The user allocated buffer 
*   \param   buff_size The user allocated buffer size (on enter) and the number of BYTEs read (on exit)
*   \param   timeout_msec The timeout between bytes receive (msec) 
*   \return  TRUE read procedure ok
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API BOOL receive_buffer( board_data* p_data, UINT8* buff, UINT16 *buff_size, int timeout_msec);

////////////////////////////////////////////////////////////////////////////////////////////////
//
//     L E V E L   1   A P I s
//
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
/*! \fn      BOOL BOOL send_cmd( board_data* p_data, int cmd_index, int ch_index, const void *cmd_value, void *cmd_result, int cmd_result_size, CMD_ERROR_CODE* error_code);
*   \brief   Sends a command to the specified channel
*
*            Sends a command to the specified channel and waits for the answer
*            
*   \param   p_data Pointer to board data
*   \param   cmd_index The index of the command (as from the board specific COMMANDS enumerator)
*   \param   ch_index The channel index to with send the command
*   \param   cmd_value The command input parameter value's pointer according to the cmd_table format: 
*						may be null if no input parameter is required
*   \param   cmd_result The command result value's pointer according to the cmd_table format: 
*						may be null if no result value is expected
*   \param   cmd_result_size The cmd_result storage size : meaningful for CMD_PTYPE_STRING result only
*   \param   error_code The communication error code pointer (my be null)
*   \return  TRUE  send procedure ok
*/
////////////////////////////////////////////////////////////////////////////////////////////////
DLL_API BOOL send_cmd( board_data* p_data, int cmd_index, int ch_index, const void *cmd_value, void *cmd_result, int cmd_result_size, CMD_ERROR_CODE* error_code);

////////////////////////////////////////////////////////////////////////////////////////////////
//
//     G L O B A L   A P I s
//
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
//
//     M I S C E L L A N E O U S   A P I s
//
////////////////////////////////////////////////////////////////////////////////////////////////

#endif			// __BOARD_COMMONS_H
